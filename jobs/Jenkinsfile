pipeline {
    agent none
    environment {
        DC_WEBHOOK = credentials('GITHUB-HOOK-DEVOPS')
    }
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }
    stages {
        stage('Clean Workspace'){
            agent any
            steps{
                // Clean before build
                cleanWs()
                // We need to explicitly checkout from SCM here
                checkout scm
            }
        }
        stage('Build') {
            agent{
                docker{
                    image 'maven:3.8.7-openjdk-18'
                }
            }
            steps {
                script{
                    sh "echo generando el fragmento jar"
                    sh "mvn clean install package"
                    sh "echo moviendo el archivo dockerfile donde est√° el fragmento y hacer el artifact"
                    sh "mv jobs/Dockerfile target/Dockerfile"
                }
            }
        }
        stage('Deploy'){
            agent any
            steps {
                script{
                    docker.withRegistry('https://registry.hub.docker.com','13ff1e12-98d9-4af3-bb62-10281237fc75'){
                        def app_version =docker.build("xhavckedx/combatdice:${env.BUILD_NUMBER}", "./target/.")
                        def app_latest = docker.build("xhavckedx/combatdice:latest", "./target/.")
                        app_version.push()
                        app_latest.push()
                    }
                }
            }
        }
    }
    post {
        success {
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            discordSend description: '''
            Build ${env.BUILD_NUMBER}
            Status: Success
            -------------- ''', footer: "[ComatDice.jar](${env.RUN_ARTIFACTS_DISPLAY_URL})", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: DC_WEBHOOK
        }
    }
}
